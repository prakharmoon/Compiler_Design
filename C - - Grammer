Program:VarDec1List FunDec1List
VarDec1List:^
VarDec1List:VarDec1 VarDec1List
VarDec1:Type id ;
VarDec1:Type id [ num ] ;
FunDec1List:FunDec1
FunDec1List:FunDec1 FunDec1List
FunDec1:Type id ( ParamDecList ) Block
ParamDecList:^
ParamDecList:ParamDec1ListTail
ParamDec1ListTail:ParamDec1
ParamDec1ListTail:ParamDec1, ParamDec1ListTail
ParamDec1:Type id
ParamDec1:Type id[]
Block:{ VarDec1List StmtList }
Type:int
Type:char
StmtList:Stmt
StmtList:Stmt StmtList
UnaryOp:-
UnaryOp:!
BinOp:+
BinOp:-
BinOp:*
BinOp:/
BinOp:==
BinOp:!=
BinOp:<
BinOp:<=
BinOp:>
BinOp:>=
BinOp:&&
BinOp:||
Stmt:;
Stmt:Expr ;
Stmt:return Expr ;
Stmt:read id ;
Stmt:write Expr ;
Stmt:writeln ;
Stmt:break ;
Stmt:if ( Expr ) Stmt else Stmt
Stmt:while ( Expr ) Stmt
Stmt:Block
Expr:Primary
Expr:UnaryOp Expr
Expr:Expr BinOp Expr
Expr:id = Expr
Expr:id [Expr] = Expr
Primary:id
Primary:num
Primary:( Expr )
Primary:id ( ExprList )
Primary:id [ Expr ]
ExprList:^
ExprList:ExprListTail
ExprListTail:Expr
ExprListTail:Expr , ExprListTail
